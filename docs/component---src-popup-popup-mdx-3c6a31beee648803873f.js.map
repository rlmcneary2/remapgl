{"version":3,"sources":["webpack:///../src/popup/popup.tsx","webpack:///../src/popup/popup.mdx"],"names":["Popup","anchor","children","closeButton","offset","popupProps","popupElement","useRef","popup","map","useMap","className","location","setMapboxglPopup","useEffect","current","popupNext","PopupGL","setDOMContent","addTo","setLngLat","remove","ref","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oQAMe,SAASA,EAAT,GAMgC,IAL7CC,EAK6C,EAL7CA,OACAC,EAI6C,EAJ7CA,SAI6C,IAH7CC,mBAG6C,SAF7CC,EAE6C,EAF7CA,OACGC,E,oIAC0C,iDACvCC,EAAeC,iBAAuB,MACtCC,EAAQD,iBAAuB,MAC/BE,EAAMC,cAHiC,EAKKL,EAA1CM,EALqC,EAKrCA,UAAWC,EAL0B,EAK1BA,SAAUC,EALgB,EAKhBA,iBAiC7B,OA/BAC,oBAAU,WACR,GAAKR,EAAaS,QAAlB,CAIA,IAAMC,EAAY,IAAIC,QAAQ,CAC5BhB,SACAE,cACAC,WAECc,cAAcZ,EAAaS,SAC3BI,MAAMV,GAOT,OALAG,GAAYI,EAAUI,UAAU,CAAC,EAAG,IAEpCZ,EAAMO,QAAUC,EAChBH,GAAoBA,EAAiBG,GAE9B,WACLA,EAAUK,SACVb,EAAMO,QAAU,QAEjB,CAACN,IAEJK,oBAAU,WACJF,GAAYJ,EAAMO,SACpBP,EAAMO,QAAQK,UAAUR,IAEzB,CAACA,IAIF,mBAAKD,UAAWA,EAAWW,IAAKhB,GAC7BJ,G,2iCC5CA,IAAMqB,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,4BAAW,0BAAYC,WAAW,KAAvB,YAAX,4BAA4F,mBAAGA,WAAW,KAAQ,CAC9G,KAAQ,WADgF,OAA5F,uBAEwC,0BAAYA,WAAW,KAAvB,SAFxC,YAEsG,mBAAGA,WAAW,KAAQ,CACxH,KAAQ,oBAD0F,UAFtG,kEAKA,iBAAQ,CACN,GAAM,SADR,SAGA,0DAAyC,0BAAYA,WAAW,KAAvB,YAAzC,eACA,YAAC,IAAD,CAAOC,GAAIhC,EAAO8B,QAAQ,W,4LAK9BH,EAAWM,gBAAiB","file":"component---src-popup-popup-mdx-3c6a31beee648803873f.js","sourcesContent":["import { Point, Popup as PopupGL } from \"mapbox-gl\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useMap } from \"../map/map-context\";\nimport { LngLat } from \"../types/location\";\nimport { AnchorType } from \"../types/ui\";\n\nexport default function Popup({\n  anchor,\n  children,\n  closeButton = true,\n  offset,\n  ...popupProps\n}: PopupProps | MarkerPopupProps): JSX.Element {\n  const popupElement = useRef<HTMLDivElement>(null);\n  const popup = useRef<PopupGL | null>(null);\n  const map = useMap();\n\n  const { className, location, setMapboxglPopup } = popupProps as any;\n\n  useEffect(() => {\n    if (!popupElement.current) {\n      return;\n    }\n\n    const popupNext = new PopupGL({\n      anchor,\n      closeButton,\n      offset\n    })\n      .setDOMContent(popupElement.current)\n      .addTo(map);\n\n    location && popupNext.setLngLat([0, 0]); // tslint:disable-line no-unused-expression\n\n    popup.current = popupNext;\n    setMapboxglPopup && setMapboxglPopup(popupNext); // tslint:disable-line no-unused-expression\n\n    return () => {\n      popupNext.remove();\n      popup.current = null;\n    };\n  }, [map]);\n\n  useEffect(() => {\n    if (location && popup.current) {\n      popup.current.setLngLat(location);\n    }\n  }, [location]);\n\n  // TODO: this should be a clone with additional props.\n  return (\n    <div className={className} ref={popupElement}>\n      {children}\n    </div>\n  );\n}\n\nexport interface MarkerPopupProps {\n  /**\n   * A string indicating the part of the Marker that should be positioned\n   * closest to the coordinate set by location. Can't be changed once set.\n   */\n  anchor?: AnchorType;\n  children: React.ReactNode;\n  /**\n   * If true, a close button will appear in the top right corner of the popup.\n   */\n  closeButton?: boolean;\n  /**\n   * The offset in pixels to apply relative to the element's center. Negative\n   * values indicate left and up.\n   */\n  offset?: number | Point;\n}\n\nexport interface PopupProps extends MarkerPopupProps {\n  /**\n   * Sets the geographical location of the popup's anchor, and moves the popup to it.\n   */\n  location: LngLat;\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rich/github/remapgl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from \"docz\";\nimport Popup from \"./popup\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"popup\"\n    }}>{`Popup`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Popup/>`}</inlineCode>{` component is a child of `}<a parentName=\"p\" {...{\n        \"href\": \"../map\"\n      }}>{`Map`}</a>{` or returned by the `}<inlineCode parentName=\"p\">{`popup`}</inlineCode>{` prop of `}<a parentName=\"p\" {...{\n        \"href\": \"/remapgl/marker\"\n      }}>{`Marker`}</a>{`, it provides information when the user manipulates a control.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p>{`Props that can be passed to every `}<inlineCode parentName=\"p\">{`<Popup/>`}</inlineCode>{` component.`}</p>\n    <Props of={Popup} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}