{"version":3,"sources":["webpack:///../src/layer/mapboxgl/layer.tsx","webpack:///../src/layer/mapboxgl/layer.mdx"],"names":["Layer","props","beforeId","filter","id","layout","maxZoom","metadata","minZoom","paint","source","sourceLayer","type","eventListeners","map","useMap","useEffect","getLayer","args","push","moveLayer","removeLayer","removeSource","layerData","maxzoom","minzoom","addLayer","listeners","prop","startsWith","eventType","substr","handlerFactory","on","toLowerCase","off","data","eventHandler","isRemapGLLayer","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","isMDXComponent"],"mappings":"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","file":"component---src-layer-mapboxgl-layer-mdx-467446a6eee3f47c8644.js","sourcesContent":["import { Layer as LayerGL } from \"mapbox-gl\";\nimport React, { useEffect } from \"react\";\nimport { useMap } from \"../../map/map-context\";\nimport { LayerProps } from \"./layer-types\";\n\n\n/**\n * A layer in a map.\n */\nconst Layer: React.FC<LayerProps> = (props): null => {\n  const {\n    beforeId,\n    filter,\n    id,\n    layout,\n    maxZoom,\n    metadata,\n    minZoom,\n    paint,\n    source,\n    \"source-layer\": sourceLayer,\n    type,\n    ...eventListeners\n  } = props as InternalLayerProps;\n  const map = useMap();\n\n  // Update layer position based on beforeId.\n  useEffect(() => {\n    if (!map.getLayer(id)) {\n      return;\n    }\n\n    const args: [string] = [id];\n    if (beforeId) {\n      args.push(beforeId);\n    }\n\n    map.moveLayer(...args);\n  }, [beforeId, id]);\n\n  // Create the layer in the map.\n  useEffect(() => {\n    if (map.getLayer(id)) {\n      map.removeLayer(id);\n      map.removeSource(id);\n    }\n\n    // tslint:disable: object-literal-key-quotes\n    const layerData: LayerGL = {\n      id\n    };\n\n    if (filter) {\n      layerData.filter = filter;\n    }\n\n    if (layout) {\n      layerData.layout = layout;\n    }\n\n    if (maxZoom) {\n      layerData.maxzoom = maxZoom;\n    }\n\n    if (metadata) {\n      layerData.metadata = metadata;\n    }\n\n    if (minZoom) {\n      layerData.minzoom = minZoom;\n    }\n\n    if (paint) {\n      layerData.paint = paint;\n    }\n\n    if (source) {\n      layerData.source = source;\n    }\n\n    if (sourceLayer) {\n      layerData[\"source-layer\"] = sourceLayer;\n    }\n\n    if (type) {\n      layerData.type = type;\n    }\n\n    const args: [LayerGL, string?] = [layerData];\n    // tslint:enable: object-literal-key-quotes\n\n    if (beforeId && map.getLayer(beforeId)) {\n      args.push(beforeId);\n    }\n\n    map.addLayer(...args);\n\n    return () => {\n      map.removeLayer(id);\n      map.removeSource(id);\n    };\n  }, [id, map, paint, source, type]);\n\n  // Connect layer events.\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    function handlerFactory(eventType: string) {\n      return (data: any) => eventHandler(eventType, eventListeners, data);\n    }\n\n    const listeners = {};\n    for (const prop in eventListeners) {\n      if (prop.startsWith(\"on\") && typeof eventListeners[prop] === \"function\") {\n        const eventType = prop.substr(2);\n        listeners[eventType] = handlerFactory(eventType);\n        map.on(eventType.toLowerCase() as any, id, listeners[eventType]);\n      }\n    }\n\n    return () => {\n      // tslint:disable-next-line: forin\n      for (const eventType in listeners) {\n        map.off(eventType.toLowerCase() as any, id, listeners[eventType]);\n      }\n    };\n  }, [eventListeners]);\n\n\n  return null;\n};\n\n// Set this flag so that we can find a map's children that are Layers. This is\n// necessary to tie their position in children to their position in the map\n// layers.\n(Layer as any).isRemapGLLayer = true;\n\nexport default Layer;\n\n\nfunction eventHandler(type: string, eventListeners: any, data: any) {\n  eventListeners[`on${type}`](data);\n}\n\n\ninterface InternalLayerProps extends LayerProps {\n  /**\n   * This is a \"secret\" prop added by map-data to let us know which layer, if\n   * any, this layer goes before.\n   */\n  beforeId: string;\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rich/github/remapgl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from \"docz\";\nimport Layer from \"./layer\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"layer\"\n    }}>{`Layer`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Layer/>`}</inlineCode>{` component is a child of `}<a parentName=\"p\" {...{\n        \"href\": \"/remapgl/map\"\n      }}>{`Map`}</a>{`, it causes a layer to be added to a map. Layers are not DOM objects, they are rendered by the Map in its presentation layer, for example a canvas element.`}</p>\n    <p>{`The order that layers appear in a Map are controlled by their order as children of a `}<inlineCode parentName=\"p\">{`<Map/>`}</inlineCode>{`. As in an HTML document the last Layer in a `}<inlineCode parentName=\"p\">{`<Map/>`}</inlineCode>{` component will be the top Layer in the Map.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Layer} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"associated-types\"\n    }}>{`Associated types`}</h2>\n    <h3 {...{\n      \"id\": \"expression\"\n    }}>{`Expression`}</h3>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions\"\n      }}>{`MapboxGL documentation for expressions`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h3>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers\"\n      }}>{`MapboxGL documentation for layers`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"paint\"\n    }}>{`Paint`}</h3>\n    <p>{`Please see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.mapbox.com/mapbox-gl-js/style-spec/#layers\"\n      }}>{`MapboxGL documentation for layers`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"renderingtype\"\n    }}>{`RenderingType`}</h3>\n    <p>{`Rendering type of this layer.`}<br />{`\n`}<inlineCode parentName=\"p\">{`\"background\" | \"circle\" | \"fill\" | \"fill-extrusion\" | \"heatmap\" | \"hillshade\" | \"line\" | \"raster\" | \"symbol\"`}</inlineCode></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}