{"version":3,"sources":["webpack:///../src/marker/marker-logic.ts","webpack:///../src/hook/useMarkerState/useMarkerState.ts","webpack:///../src/marker/marker-default.tsx","webpack:///../src/marker/marker-custom.tsx","webpack:///../src/marker/marker.tsx","webpack:///../src/marker/marker.mdx"],"names":["connectMarkerEventListeners","marker","props","onDrag","onDragend","onDragstart","useEffect","on","handler","off","getLngLat","createMapboxGLMarker","map","markerElement","anchor","color","draggable","offset","options","element","PointGL","x","y","MarkerGL","setLngLat","addTo","remove","MarkerState","useMarkerState","createMarker","eventListeners","console","log","useState","initial","markerState","setMarkerState","useRef","markerRemove","currentMarker","current","created","warn","removeMarkerEventListeners","removeEventListeners","_eventListeners","propsKeys","getElement","Object","keys","filter","propKey","startsWith","handlerFactory","evt","stopPropagation","eventListener","location","handlers","type","substr","toLowerCase","connectEventListeners","connected","disconnect","handleDrag","handleDragend","handleDragstart","push","forEach","MarkerDefault","as","className","popupGetter","popup","togglePopup","uid","useMap","setComponentCreated","setPopup","popupDisplayed","popupComponent","React","createElement","Fragment","key","cloneElement","setMapboxglPopup","MarkerCustom","children","ref","moduleUid","Date","now","Marker","Children","count","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","of","isMDXComponent"],"mappings":"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","file":"component---src-marker-marker-mdx-717a39710205e57ff067.js","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport { Map as MapGL, Marker as MarkerGL, Point as PointGL } from \"mapbox-gl\";\nimport React, { useEffect } from \"react\";\nimport { ListenerProps, MarkerProps } from \"./marker-types\";\n\n/**\n * Connect other events that must be attached to the Marker's DOM element.\n */\n// export function useConnectEventListeners(\n//   marker: MarkerGL | null,\n//   props: MarkerProps,\n//   eventListeners: ListenerProps\n// ) {\n//   useEffect(() => {\n//     if (!marker) {\n//       return;\n//     }\n\n//     const {\n//       onDrag,\n//       onDragend,\n//       onDragstart,\n//       ..._eventListeners\n//     } = eventListeners;\n\n//     const markerElement = marker.getElement();\n\n//     const propsKeys = Object.keys(_eventListeners).filter(\n//       propKey =>\n//         propKey.startsWith(\"on\") &&\n//         typeof eventListeners[propKey] === \"function\"\n//     );\n\n//     function listenerFactory(propKey: string): (evt: Event) => void {\n//       return (evt: Event) => {\n//         evt.stopPropagation();\n//         const eventListener = eventListeners[propKey];\n//         if (marker && eventListener) {\n//           const { location, ...result } = props;\n//           // When the marker is dragged the props for this component don't\n//           // update, so provide the current location in the response.\n//           const data = { ...result, location: marker.getLngLat() };\n//           eventListener(data);\n//         }\n//       };\n//     }\n\n//     let listeners: { [key: string]: (evt: Event) => void } | null = {};\n//     for (const propKey of propsKeys) {\n//       const type = propKey.substr(2).toLowerCase();\n//       listeners[type] = listenerFactory(propKey);\n//       markerElement.addEventListener(type, listeners[type]);\n//     }\n\n//     return () => {\n//       // tslint:disable-next-line: forin\n//       for (const type in listeners) {\n//         markerElement.removeEventListener(type, listeners[type]);\n//       }\n\n//       listeners = null;\n//     };\n//   }, [marker, eventListeners]);\n// }\n\n/**\n * Connect the drag events supported by the MapboxGL Marker object.\n */\nexport function connectMarkerEventListeners(\n  marker: MarkerGL | null,\n  props: MarkerProps,\n  { onDrag, onDragend, onDragstart }: MarkerProps\n) {\n  useEffect(() => {\n    if (!marker || !onDrag) {\n      return;\n    }\n\n    function handler() {\n      if (onDrag) {\n        onDrag(props);\n      }\n    }\n\n    marker.on(\"drag\", handler);\n    return () => {\n      marker.off(\"drag\", handler);\n    };\n  }, [marker, onDrag, props]);\n\n  useEffect(() => {\n    if (!marker || !onDragend) {\n      return;\n    }\n\n    function handler() {\n      if (marker && onDragend) {\n        onDragend(marker.getLngLat());\n      }\n    }\n\n    marker.on(\"dragend\", handler);\n    return () => {\n      marker.off(\"dragend\", handler);\n    };\n  }, [marker, onDragend]);\n\n  useEffect(() => {\n    if (!marker || !onDragstart) {\n      return;\n    }\n\n    function handler() {\n      if (marker && onDragstart) {\n        onDragstart(marker.getLngLat());\n      }\n    }\n\n    marker.on(\"dragstart\", handler);\n    return () => {\n      marker.off(\"dragstart\", handler);\n    };\n  }, [marker, onDragstart]);\n}\n\n// export function createMapboxGLMarker(\n//   map: MapGL,\n//   markerElement: HTMLElement | null,\n//   { anchor, children, color, draggable, offset }: MarkerProps\n// ): MarkerGL | void {\n//   const hasChildren = 0 < React.Children.count(children);\n//   const options: mapboxgl.MarkerOptions = {\n//     anchor,\n//     color,\n//     draggable\n//   };\n\n//   // If there are children then the React element attached to ref has to exist\n//   // before the Marker can be created.\n//   if (hasChildren) {\n//     if (!markerElement) {\n//       return;\n//     } else {\n//       options.element = markerElement;\n//     }\n//   }\n\n//   if (offset) {\n//     options.offset = new PointGL(offset.x, offset.y);\n//   }\n\n//   // Create a marker but provide a dummy location. Don't use the location prop\n//   // because that means it will be wanted as a dependency of useEffect, but we\n//   // don't want the Marker removed and recreated just because it moved. A\n//   // location is needed because if there is no location when the Marker is\n//   // added to the map an error will be thrown.\n//   return new MarkerGL(options).setLngLat([0, 0]).addTo(map);\n// }\nexport function createMapboxGLMarker(\n  map: MapGL,\n  { anchor, color, draggable, offset }: MarkerProps,\n  markerElement?: HTMLElement\n): [MarkerGL, () => {}] {\n  const options: mapboxgl.MarkerOptions = {\n    anchor,\n    color,\n    element: markerElement,\n    draggable\n  };\n\n  if (offset) {\n    options.offset = new PointGL(offset.x, offset.y);\n  }\n\n  // Create a marker but provide a dummy location. Don't use the location prop\n  // because that means it will be wanted as a dependency of useEffect, but we\n  // don't want the Marker removed and recreated just because it moved. A\n  // location is needed because if there is no location when the Marker is\n  // added to the map an error will be thrown.\n  const marker = new MarkerGL(options).setLngLat([0, 0]).addTo(map);\n  return [marker, () => marker.remove()];\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Marker as MarkerGL } from \"mapbox-gl\";\n// import {\n//   useConnectEventListeners,\n//   connectMarkerEventListeners\n// } from \"../../marker/marker-logic\";\nimport { MarkerProps, ListenerProps } from \"../../marker/marker-types\";\n\nexport type MarkerCreator = (element?: HTMLElement) => MarkerCreatorResult;\n\nexport type MarkerCreatorResult = [MarkerGL, MarkerRemover];\n\nexport type MarkerRemover = () => void;\n\nexport enum MarkerState {\n  initial = \"INITIAL\",\n  created = \"CREATED\",\n  connected = \"CONNECTED\"\n}\n\ninterface HookOptions {\n  createMarker: MarkerCreator;\n  eventListeners: any;\n  props: MarkerProps;\n  markerElement?: HTMLElement | null;\n}\n\nexport default function useMarkerState({\n  createMarker,\n  eventListeners,\n  props,\n  ...options\n}: HookOptions): MarkerGL {\n  const markerElement =\n    \"markerElement\" in options ? options.markerElement : false;\n  console.log(`useMarkerState: enter; markerElement=${markerElement}.`);\n  const [markerState, setMarkerState] = useState<MarkerState>(\n    MarkerState.initial\n  );\n  const marker = useRef<MarkerGL>(null) as React.MutableRefObject<MarkerGL>;\n  const markerRemove = useRef<MarkerRemover>(null) as React.MutableRefObject<\n    MarkerRemover\n  >;\n\n  useEffect(() => {\n    if (markerElement !== false && !markerElement) {\n      return;\n    }\n\n    let currentMarker: mapboxgl.Marker;\n    if (markerState === MarkerState.initial) {\n      console.log(\"useMarkerState: creating Marker.\");\n      [marker.current, markerRemove.current] = !markerElement\n        ? createMarker()\n        : createMarker(markerElement);\n\n      currentMarker = marker.current;\n      setMarkerState(MarkerState.created);\n    }\n\n    return () => {\n      currentMarker &&\n        console.warn(\"useMarkerState: SHOULD remove Marker but does NOTHING.\");\n      // markerRemove.current();\n    };\n  }, [createMarker, marker, markerElement, markerRemove, markerState]);\n\n  useEffect(() => {\n    if (markerElement !== false && !markerElement) {\n      return;\n    }\n\n    let removeMarkerEventListeners: () => void;\n    let removeEventListeners: () => void;\n    if (markerState === MarkerState.created) {\n      removeMarkerEventListeners = connectMarkerEventListeners(\n        marker.current,\n        props,\n        eventListeners as MarkerProps\n      );\n      removeEventListeners = connectEventListeners(\n        marker.current,\n        props,\n        eventListeners as ListenerProps\n      );\n      setMarkerState(MarkerState.connected);\n    }\n\n    return () => {\n      removeMarkerEventListeners && removeMarkerEventListeners();\n      removeEventListeners && removeEventListeners();\n    };\n  }, [eventListeners, marker, markerElement, markerState, props]);\n\n  console.log(`useMarkerState: exit; marker=${!!marker.current}.`);\n  return marker.current;\n}\n\n/**\n * Connect events that must be attached to the Marker's DOM element.\n */\nfunction connectEventListeners(\n  marker: MarkerGL,\n  props: MarkerProps,\n  eventListeners: ListenerProps\n) {\n  const { onDrag, onDragend, onDragstart, ..._eventListeners } = eventListeners;\n\n  const markerElement = marker.getElement();\n\n  const propsKeys = Object.keys(_eventListeners).filter(\n    propKey =>\n      propKey.startsWith(\"on\") && typeof eventListeners[propKey] === \"function\"\n  );\n\n  function handlerFactory(propKey: string): (evt: Event) => void {\n    return (evt: Event) => {\n      console.log(`useMarkerState: handling ${propKey}.`);\n      evt.stopPropagation();\n      const eventListener = eventListeners[propKey];\n      if (eventListener) {\n        const { location, ...result } = props;\n        // When the marker is dragged the props for this component don't\n        // update, so provide the current location in the response.\n        const data = { ...result, location: marker.getLngLat() };\n        eventListener(data);\n      }\n    };\n  }\n\n  let handlers: { [key: string]: (evt: Event) => void } | null = {};\n  for (const propKey of propsKeys) {\n    const type = propKey.substr(2).toLowerCase();\n    // const type = propKey;\n    console.log(`useMarkerState: creating ${type} handler.`);\n    handlers[type] = handlerFactory(propKey);\n    // markerElement.addEventListener(type, handlers[type]);\n    marker.on(propKey, handlers[type]);\n  }\n\n  return () => {\n    // tslint:disable-next-line: forin\n    for (const type in handlers) {\n      // markerElement.removeEventListener(type, handlers[type]);\n      marker.off(type, handlers[type]);\n    }\n\n    handlers = null;\n  };\n}\n\n/**\n * Connect the drag events supported by the MapboxGL Marker object.\n */\nexport function connectMarkerEventListeners(\n  marker: MarkerGL,\n  props: MarkerProps,\n  { onDrag, onDragend, onDragstart }: MarkerProps\n) {\n  console.log(\"connectMarkerEventListeners: enter\");\n  const disconnect: (() => void)[] = [];\n\n  // Drag\n  function handleDrag() {\n    if (onDrag) {\n      onDrag(props);\n    }\n  }\n  marker.on(\"drag\", handleDrag);\n  disconnect.push(() => {\n    marker.off(\"drag\", handleDrag);\n  });\n\n  // Drag end\n  function handleDragend() {\n    console.log(\"useMarkerState: dragend\");\n    if (marker && onDragend) {\n      onDragend(marker.getLngLat());\n    }\n  }\n  console.log(\"useMarkerState: on dragend\");\n  marker.on(\"dragend\", handleDragend);\n  disconnect.push(() => {\n    marker.off(\"dragend\", handleDragend);\n  });\n\n  // Drag start\n  function handleDragstart() {\n    if (marker && onDragstart) {\n      onDragstart(marker.getLngLat());\n    }\n  }\n  marker.on(\"dragstart\", handleDragstart);\n  disconnect.push(() => {\n    marker.off(\"dragstart\", handleDragstart);\n  });\n\n  return () => disconnect.forEach(off => off());\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Popup as PopupGL } from \"mapbox-gl\";\nimport { useMap } from \"../map/map-context\";\nimport { createMapboxGLMarker } from \"./marker-logic\";\nimport { MarkerProps, MarkerPropsInternal } from \"./marker-types\";\nimport useMarkerState from \"../hook/useMarkerState/useMarkerState\";\n\n/**\n * Creates a marker component.\n */\nexport default function MarkerDefault(props: MarkerPropsInternal): JSX.Element {\n  const {\n    as,\n    className,\n    location,\n    popup: popupGetter,\n    togglePopup,\n    uid,\n    ...eventListeners\n  } = props;\n  const map = useMap();\n  const marker = useMarkerState({\n    createMarker: () =>\n      createMapboxGLMarker(map, eventListeners as MarkerProps),\n    eventListeners,\n    props\n  });\n  const [, setComponentCreated] = useState(false);\n  const [popup, setPopup] = useState<PopupGL>();\n  const popupDisplayed = useRef(false);\n\n  // After the component returns nothing will happen because the props do not change.\n  useEffect(() => {\n    setComponentCreated(true);\n    return () => console.log(`MarkerDefault[${uid}]: removed.`);\n  }, [uid]);\n\n  // Update the marker location.\n  useEffect(() => {\n    if (marker) {\n      marker.setLngLat(location);\n    }\n  }, [location, marker]);\n\n  // Setup the Marker's popup (if it exists).\n  useEffect(() => {\n    if (marker && popup) {\n      marker.setPopup(popup);\n      popupDisplayed.current = true;\n    }\n\n    // tslint:disable-next-line no-unused-expression\n    return () => {\n      marker && marker.setPopup();\n    };\n  }, [marker, popup]);\n\n  useEffect(() => {\n    if (marker) {\n      if (togglePopup && !popupDisplayed.current) {\n        popupDisplayed.current = true;\n        marker.togglePopup();\n      }\n      if (!togglePopup && popupDisplayed.current) {\n        popupDisplayed.current = false;\n        marker.togglePopup();\n      }\n    }\n  }, [togglePopup, marker]);\n\n  // TODO: this must be an instance of a <Popup /> component. How to type this\n  // properly with TypeScript?\n  const popupComponent = popupGetter && popupGetter();\n\n  return (\n    <>\n      {React.createElement(React.Fragment, {\n        key: uid\n      })}\n      {popupComponent &&\n        React.cloneElement(popupComponent, {\n          setMapboxglPopup: setPopup\n        } as any)}\n    </>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Popup as PopupGL } from \"mapbox-gl\";\nimport { useMap } from \"../map/map-context\";\nimport { createMapboxGLMarker } from \"./marker-logic\";\nimport { MarkerProps, MarkerPropsInternal } from \"./marker-types\";\nimport useMarkerState from \"../hook/useMarkerState/useMarkerState\";\n\n/**\n * Creates a marker component.\n */\nexport default function MarkerCustom(props: MarkerPropsInternal): JSX.Element {\n  const {\n    as = \"div\",\n    children,\n    className,\n    location,\n    popup: popupGetter,\n    togglePopup,\n    uid,\n    ...eventListeners\n  } = props;\n  const map = useMap();\n  const markerElement = useRef<HTMLElement | null>(null);\n  const marker = useMarkerState({\n    createMarker: element =>\n      createMapboxGLMarker(map, eventListeners as MarkerProps, element),\n    eventListeners,\n    markerElement: markerElement.current,\n    props\n  });\n  const [, setComponentCreated] = useState(false);\n  const [popup, setPopup] = useState<PopupGL>();\n  const popupDisplayed = useRef(false);\n\n  useEffect(() => {\n    setComponentCreated(true);\n    return () => console.log(`MarkerCustom[${uid}]: removed.`);\n  }, [uid]);\n\n  // Update the marker location.\n  useEffect(() => {\n    if (marker) {\n      marker.setLngLat(location);\n    }\n  }, [location, marker]);\n\n  // Setup the Marker's popup (if it exists).\n  useEffect(() => {\n    if (marker && popup) {\n      marker.setPopup(popup);\n      popupDisplayed.current = true;\n    }\n\n    // tslint:disable-next-line no-unused-expression\n    return () => {\n      marker && marker.setPopup();\n    };\n  }, [marker, popup]);\n\n  useEffect(() => {\n    if (marker) {\n      if (togglePopup && !popupDisplayed.current) {\n        popupDisplayed.current = true;\n        marker.togglePopup();\n      }\n      if (!togglePopup && popupDisplayed.current) {\n        popupDisplayed.current = false;\n        marker.togglePopup();\n      }\n    }\n  }, [togglePopup, marker]);\n\n  // TODO: this must be an instance of a <Popup /> component. How to type this\n  // properly with TypeScript?\n  const popupComponent = popupGetter && popupGetter();\n\n  return (\n    <>\n      {React.createElement(\n        as,\n        {\n          className,\n          key: uid,\n          ref: markerElement\n        },\n        children\n      )}\n      {popupComponent &&\n        React.cloneElement(popupComponent, {\n          setMapboxglPopup: setPopup\n        } as any)}\n    </>\n  );\n}\n","// import { Marker as MarkerGL, Popup as PopupGL } from \"mapbox-gl\";\nimport React, { useEffect, useRef, useState } from \"react\";\n// import { useMap } from \"../map/map-context\";\n// import {\n//   connectEventListeners,\n//   connectMarkerEventListeners,\n//   createMapboxGLMarker\n// } from \"./marker-logic\";\nimport { ListenerProps, MarkerProps } from \"./marker-types\";\nimport MarkerDefault from \"./marker-default\";\nimport MarkerCustom from \"./marker-custom\";\n\nlet moduleUid = Date.now();\n\n/**\n * Creates a marker component.\n */\nexport default function Marker({\n  children,\n  ...props\n}: MarkerProps): JSX.Element {\n  // const {\n  //   as = \"div\",\n  //   children,\n  //   className,\n  //   location,\n  //   popup: popupGetter,\n  //   togglePopup,\n  //   ...eventListeners\n  // } = props;\n  const uid = useRef(`${moduleUid++}`);\n  // const markerElement = useRef<HTMLElement | null>(null);\n  // const [marker, setMarker] = useState<MarkerGL | null>(null);\n  // const [popup, setPopup] = useState<PopupGL>();\n  // const popupDisplayed = useRef(false);\n  // const map = useMap();\n\n  const hasChildren = 0 < React.Children.count(children);\n\n  // useEffect(() => {\n  //   if (marker) {\n  //     return;\n  //   }\n\n  //   const nextMarker = createMapboxGLMarker(map, markerElement.current, props);\n  //   if (nextMarker) {\n  //     setMarker(nextMarker);\n  //     return () => {\n  //       nextMarker.remove();\n  //       setMarker(null);\n  //     };\n  //   }\n  // }, [map]);\n\n  // // Update the marker location.\n  // useEffect(() => {\n  //   if (marker) {\n  //     marker.setLngLat(location);\n  //   }\n  // }, [location, marker]);\n\n  // // Setup the Marker's popup (if it exists).\n  // useEffect(() => {\n  //   if (marker && popup) {\n  //     marker.setPopup(popup);\n  //     popupDisplayed.current = true;\n  //   }\n\n  //   // tslint:disable-next-line no-unused-expression\n  //   return () => {\n  //     marker && marker.setPopup();\n  //   };\n  // }, [marker, popup]);\n\n  // useEffect(() => {\n  //   if (marker) {\n  //     if (togglePopup && !popupDisplayed.current) {\n  //       popupDisplayed.current = true;\n  //       marker.togglePopup();\n  //     }\n  //     if (!togglePopup && popupDisplayed.current) {\n  //       popupDisplayed.current = false;\n  //       marker.togglePopup();\n  //     }\n  //   }\n  // }, [togglePopup, marker]);\n\n  // connectMarkerEventListeners(marker, props, eventListeners as MarkerProps);\n  // connectEventListeners(marker, props, eventListeners as ListenerProps);\n\n  // // TODO: this must be an instance of a <Popup /> component. How to type this\n  // // properly with TypeScript?\n  // const popupComponent = popupGetter && popupGetter();\n\n  // return (\n  //   <>\n  //     {hasChildren &&\n  //       React.createElement(\n  //         as,\n  //         {\n  //           className,\n  //           ref: markerElement\n  //         },\n  //         children\n  //       )}\n  //     {popupComponent &&\n  //       React.cloneElement(popupComponent, {\n  //         setMapboxglPopup: setPopup\n  //       } as any)}\n  //   </>\n  // );\n  return hasChildren ? (\n    <MarkerCustom {...{ ...props, uid: uid.current }}>{children}</MarkerCustom>\n  ) : (\n    <MarkerDefault {...{ ...props, uid: uid.current }} />\n  );\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rich/github/remapgl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from \"docz\";\nimport Marker from \"./marker\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"marker\"\n    }}>{`Marker`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<Marker/>`}</inlineCode>{` component is a child of `}<a parentName=\"p\" {...{\n        \"href\": \"/remapgl/map\"\n      }}>{`Map`}</a>{`, it causes a marker to appear at a specific location on a map. Markers can have a `}<a parentName=\"p\" {...{\n        \"href\": \"/remapgl/popup\"\n      }}>{`Popup`}</a>{` that provides more information.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Marker} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"associated-types\"\n    }}>{`Associated Types`}</h2>\n    <h3 {...{\n      \"id\": \"anchortype\"\n    }}>{`AnchorType`}</h3>\n    <p>{`A string indicating the part of the Marker that should be positioned closest to the coordinate set by location.`}</p>\n    <p><inlineCode parentName=\"p\">{`\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"point\"\n    }}>{`Point`}</h3>\n    <p>{`A Point geometry object, which has x and y properties representing screen coordinates in pixels.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Comments`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`x`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`X coordinate in pixels.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><strong parentName=\"td\">{`y`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`number`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Y coordinate in pixels.`}</td>\n        </tr>\n      </tbody>\n    </table>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}